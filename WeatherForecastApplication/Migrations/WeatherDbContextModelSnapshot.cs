// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WeatherForecastApplication.Data;

#nullable disable

namespace WeatherForecastApplication.Migrations
{
    [DbContext(typeof(WeatherDbContext))]
    partial class WeatherDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.0");

            modelBuilder.Entity("WeatherForecastApplication.Data.Entities.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<double?>("Elevation")
                        .HasPrecision(10, 2)
                        .HasColumnType("REAL");

                    b.Property<DateTime?>("LastAccessedAt")
                        .HasColumnType("TEXT");

                    b.Property<double>("Latitude")
                        .HasPrecision(10, 7)
                        .HasColumnType("REAL");

                    b.Property<double>("Longitude")
                        .HasPrecision(10, 7)
                        .HasColumnType("REAL");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Latitude", "Longitude")
                        .HasDatabaseName("IX_Location_Coordinates");

                    b.ToTable("Locations", (string)null);
                });

            modelBuilder.Entity("WeatherForecastApplication.Data.Entities.WeatherForecastData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CurrentDataJson")
                        .HasColumnType("TEXT");

                    b.Property<string>("DailyDataJson")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ForecastDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("HourlyDataJson")
                        .HasColumnType("TEXT");

                    b.Property<int>("LocationId")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("PrecipitationSum")
                        .HasPrecision(6, 2)
                        .HasColumnType("REAL");

                    b.Property<DateTime>("RetrievedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<double?>("TemperatureMax")
                        .HasPrecision(5, 2)
                        .HasColumnType("REAL");

                    b.Property<double?>("TemperatureMin")
                        .HasPrecision(5, 2)
                        .HasColumnType("REAL");

                    b.Property<string>("Timezone")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("TimezoneAbbreviation")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("WeatherCode")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RetrievedAt")
                        .HasDatabaseName("IX_WeatherForecast_RetrievedAt");

                    b.HasIndex("LocationId", "ForecastDate")
                        .HasDatabaseName("IX_WeatherForecast_Location_Date");

                    b.ToTable("WeatherForecasts", (string)null);
                });

            modelBuilder.Entity("WeatherForecastApplication.Data.Entities.WeatherForecastData", b =>
                {
                    b.HasOne("WeatherForecastApplication.Data.Entities.Location", "Location")
                        .WithMany("WeatherForecasts")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("WeatherForecastApplication.Data.Entities.Location", b =>
                {
                    b.Navigation("WeatherForecasts");
                });
#pragma warning restore 612, 618
        }
    }
}
